1. 1980s-Style Adventure Game (Adventure.java)

Purpose: A text-based adventure game where the player explores a cave, collects gold, fights creatures, and navigates through different rooms.
Key Functionalities:
Room System: The game consists of multiple rooms, each implemented as a function. Players navigate using direction commands (N, S, E, W).
Combat Mechanics: Players encounter different creatures (Bunny, Grue, Troll), each dealing different damage.
Treasure Collection: Randomized gold collection with different values.
Health & Food System: Players can consume food (Candy, Steak, Potion) to restore health.
Game Over Condition: The game ends when the player finds the exit, but there's a twist—the player falls back into the cave.
Notable Features:
Uses randomized events for treasure and combat encounters.
Dynamic status updates inform the player about their health and gold.
Navigation restrictions prevent moving into walls.



2. ASCII Image Editor (Homework5_Starter.java)

Purpose: A Java program that allows users to edit a 10x20 ASCII image using different commands.
Key Functionalities:
Insert a Character: Place a character at a specific location.
Insert a Character Range: Fill a section of the grid with a character.
Insert a Character Block: Fill a rectangular block with a character.
Remove a Character: Delete a specific character.
Remove a Character Range/Block: Clear multiple characters in a specific region.
Remove All Characters: Reset the image.
Display Image: Prints the ASCII grid with borders.
Notable Features:
Uses 2D arrays to store and modify the ASCII grid.
Error handling for user input ensures valid commands.
Menu system for selecting operations.




3. Pokémon Trainer Simulation (Homework6_starter.java)

Purpose: A turn-based Pokémon simulation where a trainer encounters wild Pokémon, collects items, and battles.
Key Functionalities:
Read Pokémon List: Loads 25 Pokémon names from a file.
Trainer Stats: Allows creation of a trainer with name, Pokémon, and inventory.
Random Wild Encounters: Generates wild Pokémon and random items (Poke Ball, Ultra Ball, Revive).
Battles & Capturing Pokémon:
Players battle wild Pokémon with their own team.
If a Pokémon faints, the player can use a Revive or remove it.
If they win, they have the option to catch the Pokémon.
Game Loop: Allows continuous play until all Pokémon faint.
Data Persistence: Saves the trainer's progress to a text file.
Notable Features:
Turn-based battle system with random outcomes.
Inventory system for collecting and using items.
Pokémon capturing mechanics based on item availability.


4.Pokémon Adventure Game (pok.java)

Purpose: A simple text-based Pokémon adventure game where the player explores different areas, encounters wild Pokémon, and chooses whether to catch them or run.
Key Functionalities:
Character Creation:
The player enters their name and selects a starter Pokémon (Bulbasaur, Charmander, Squirtle).
Exploration Mechanism:
The game has 3 areas.
Each area requires the player to take a random number of steps before encountering a Pokémon.
Pokémon Encounters:
Players can catch (50% chance) or run from wild Pokémon.
Each encounter is randomized.
Game Progression:
Players can stay in an area or move to the next.
If they encounter 5 Pokémon in one area, they are forced to move to the next.
Game Completion:
After exploring all three areas, the game ends and displays the total number of Pokémon caught.
Notable Features:
Uses randomized step count & Pokémon capture rate.
Loop-based decision-making ensures valid inputs (1 or 2).
Tracks individual area statistics and overall game statistics.



5.Summary of Hawkins Palace Arcade Program (Main-6.java)

Overview
This Java program simulates a visit to Hawkins Palace Arcade, where four friends (Dustin, Lucas, Mike, and Max) bring a certain number of quarters to play arcade games. The program calculates:

How many games each friend can play based on their available quarters and preferred game cost.
How much money is left after playing.
The total revenue The Palace Arcade earns over different time periods (weekly, monthly, yearly).
Key Functionalities
User Input for Each Friend
The user enters how many quarters each friend brings.
The user enters the cost per game each friend prefers.
Game Calculation for Each Friend
Uses integer division (/) to calculate the total number of games played.
Uses the modulus operator (%) to determine the remaining quarters after playing.
Displaying Results for Each Friend
Prints how many games each person played and how many quarters remain.
Arcade Profit Calculations
The user enters the average nightly revenue of the arcade.
The program calculates:
Weekly profit (6 nights per week).
Monthly profit (4 weeks in a month).
Yearly profit (52 weeks in a year).
The profits are displayed in formatted currency values ($XX.XX).


